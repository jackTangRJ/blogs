<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小唐的前端博客</title>
  
  <subtitle>程序员晋级之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jacktangrj.github.io/"/>
  <updated>2018-06-05T07:34:05.831Z</updated>
  <id>https://jacktangrj.github.io/</id>
  
  <author>
    <name>JackTang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JSON对象</title>
    <link href="https://jacktangrj.github.io/2018/06/JSON/"/>
    <id>https://jacktangrj.github.io/2018/06/JSON/</id>
    <published>2018-06-05T01:53:12.000Z</published>
    <updated>2018-06-05T07:34:05.831Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.wailian.work/images/2018/06/05/timg.jpg" alt="image"></p><blockquote><h4 id="JSON的优点"><a href="#JSON的优点" class="headerlink" title="JSON的优点"></a>JSON的优点</h4></blockquote><p>相比 XML 格式，JSON 格式有两个显著的优点：书写简单，一目了然；符合 JavaScript 原生语法，可以由解释引擎直接处理，不用另外添加解析代码。所以，JSON 迅速被接受，已经成为各大网站交换数据的标准格式，并被写入标准。</p><a id="more"></a><h2 id="1-JSON-格式"><a href="#1-JSON-格式" class="headerlink" title="1.JSON 格式"></a>1.JSON 格式</h2><blockquote><p>每个 JSON 对象就是一个值，可能是一个数组或对象，也可能是一个原始类型的值。总之，只能是一个值，不能是两个或更多的值。</p></blockquote><p><strong>JSON 对值的类型和格式有严格的规定</strong></p><ol><li>复合类型的值只能是数组或对象，不能是函数、正则表达式对象、日期对象。</li><li>原始类型的值只有四种：字符串、数值（必须以十进制表示）、布尔值和<code>null</code>（不能使用<code>NaN</code>,<code>Infinity</code> , <code>-Infinity</code>和<code>undefined</code>）。</li><li>字符串必须使用<code>双引号</code>表示，不能使用单引号。</li><li>对象的键名必须放在双引号里面。</li><li>数组或对象最后一个成员的后面，不能加逗号。</li></ol><p>注意: <code>null</code> 、空数组和空对象都是合法的 JSON 值。</p><h2 id="2-JSON-静态方法"><a href="#2-JSON-静态方法" class="headerlink" title="2.JSON 静态方法"></a>2.JSON 静态方法</h2><p>JSON对象是 JavaScript 的原生对象，用来处理 JSON 格式数据。它有两个静态方法：<code>JSON.stringify()</code> <br> <code>JSON.parse()</code> </p><h4 id="2-1-nbsp-nbsp-JSON-stringify方法"><a href="#2-1-nbsp-nbsp-JSON-stringify方法" class="headerlink" title="2.1  &nbsp;&nbsp;JSON.stringify方法"></a>2.1  &nbsp;&nbsp;JSON.stringify方法</h4><p><strong>用于将一个值转为 JSON 字符串。该字符串符合JSON格式 ，并且可以被<code>JSON.parse</code>方法还原。</strong></p><p>1.如果对象的属性是<code>undefined</code>、<code>函数</code>、或<code>XML对象</code>，<code>Json.stringify</code>会过滤<br>2.如果数组的成员是<code>undefined</code>、<code>函数</code>、或<code>XML对象</code>，<code>Json.stringify</code>，则这些值会转为null<br>3.正则对象会被转化为空对象<br>4.<code>Json.stringify</code>会忽略对象不可遍历熟悉<br>5.对于原始类型的值，转换结果会自带双引号。<br>6.<strong><code>Json.stringify</code></strong>方法会忽略对象的不可遍历属性</p><div class="code"><br><b><br><pre><br>    <span class="line">var <span class="keyword">obj</span> = {};</span><br>    <span class="line">Object.defineProperties(obj, {</span><br>        <span class="line"><span class="keyword">‘foo’</span>: {</span><br>            <span class="line"><span class="keyword">value</span>: <span class="string">1</span></span><br>            <span class="line"><span class="keyword">enumerable</span>: <span class="string">true</span></span><br>        <span class="line">},</span><br>        <span class="line"><span class="keyword">‘bar’</span>: {</span><br>            <span class="line"><span class="keyword">value</span>: <span class="string">2</span></span><br>            <span class="line"><span class="keyword">enumerable</span>: <span class="string">false</span></span><br>        <span class="line">}</span><br>    <span class="line">});</span><br><br>    <span class="line">console.log(<span class="keyword">JSON.stringify(obj);</span>)</span>        // “{“foo”:1}”<br><br></pre><br></b><br></div><p><strong><code>Json.stringify</code>的第二个参数</strong></p><p>JSON.stringify方法还可以接受一个数组，作为第二个参数，指定需要转成字符串的属性。<br>    参数为数组： <strong>只对对象的属性有效，对数组无效</strong><br>    参数为函数 <strong>：用来更改JSON.stringify的返回值，中间过滤操作,如果处理函数返回undefined或没有返回值，则改属性会被忽略</strong></p><div class="code"><br><b><br><pre><br>    <span class="line">console.log( <span class="keyword"> JSON.stringify([‘a’, ‘b’], [‘0’])</span> ) </span><br>    // “[“a”,”b”]”<br><br>    <span class="line">console.log( <span class="keyword"> JSON.stringify({0: ‘a’, 1: ‘b’}, [‘0’]) </span> )</span><br>    // “{“0”:”a”}”<br><br>    <span class="line">function <span class="string">f</span>(key, value) {</span><br>        <span class="line">if (typeof value === “number”) </span><br>            <span class="line"> value = 2 * value; </span><br>        <span class="line">} </span><br>        <span class="line"> <code>return</code>  value;</span><br>    <span class="line">}</span><br><br>    <span class="line"><span class="keyword">JSON.stringify({ a: 1, b: 2 }, f)</span></span>         // ‘{“a”: 2,”b”: 4}’<br><br></pre><br><b><br></b></b></div><p><strong><code>Json.stringify</code>的第三个参数</strong></p><p><b>JSON.stringify</b>还可以接受第三个参数，用于增加返回的 JSON 字符串的可读性。如果是数字，表示每个属性前面添加的空格（最多不超过10个）；如果是字符串（不超过10个字符），则该字符串会添加在每行前面。</p><h2 id="2-1-2-nbsp-nbsp-JSON-parse方法"><a href="#2-1-2-nbsp-nbsp-JSON-parse方法" class="headerlink" title="2.1.2 &nbsp;&nbsp;JSON.parse方法"></a>2.1.2 &nbsp;&nbsp;JSON.parse方法</h2><p>用于将 JSON 字符串转换成对应的值。</p><div class="tip"><br>    如果传入的字符串不是有效的 JSON 格式，JSON.parse方法将报错<br></div><p>为了处理解析错误，可以将JSON.parse方法放在try…catch代码块中。</p><div class="code"><br><b><br><pre><br>    <span class="line">try {</span><br>        <span class="line">JSON.parse(“‘String’”);</span><br>    <span class="line"> } catch(e) {</span><br>        <span class="line">console.log(‘parsing error’); </span><br>    <span class="line"> }</span><br><br></pre><br></b><br></div><blockquote><p>JSON.parse方法可以接受一个处理函数，作为第二个参数，用法与JSON.stringify方法类似.</p></blockquote><h4 id="3-参数对象的-toJSON-方法"><a href="#3-参数对象的-toJSON-方法" class="headerlink" title="3.参数对象的 toJSON 方法"></a>3.参数对象的 toJSON 方法</h4><div class="tip"><br>    如果参数对象有自定义的toJSON方法，那么JSON.stringify会使用这个方法的返回值作为参数，而忽略原对象的其他属性。<br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.wailian.work/images/2018/06/05/timg.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;JSON的优点&quot;&gt;&lt;a href=&quot;#JSON的优点&quot; class=&quot;headerlink&quot; title=&quot;JSON的优点&quot;&gt;&lt;/a&gt;JSON的优点&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;相比 XML 格式，JSON 格式有两个显著的优点：书写简单，一目了然；符合 JavaScript 原生语法，可以由解释引擎直接处理，不用另外添加解析代码。所以，JSON 迅速被接受，已经成为各大网站交换数据的标准格式，并被写入标准。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6中proxy拦截对象</title>
    <link href="https://jacktangrj.github.io/2018/06/proxy/"/>
    <id>https://jacktangrj.github.io/2018/06/proxy/</id>
    <published>2018-06-04T03:40:40.000Z</published>
    <updated>2018-06-04T07:54:28.260Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.wailian.work/images/2018/06/04/timg.th.jpg" alt="image"></p><blockquote><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</p></blockquote><a id="more"></a><h4 id="问题抛出"><a href="#问题抛出" class="headerlink" title="问题抛出"></a>问题抛出</h4><p><strong>定义一个对象，指定对象sex属性不能重写，抛出错误</strong></p><ul><li style="list-style: none"><input type="checkbox" checked> 来看看ES3的写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//es3拦截方法</span><br><span class="line">function ProxyEs3() &#123;</span><br><span class="line">    var obj = &#123;</span><br><span class="line">        name:&apos;小明&apos;,</span><br><span class="line">        sex:&quot;男&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.get = function (key) &#123;</span><br><span class="line">        if(key in obj)&#123;</span><br><span class="line">            return obj[key]</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            throw new ReferenceError(&apos;混蛋，没有这个属性,重写！！&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    this.set = function (key,value) &#123;</span><br><span class="line">        if(key===&apos;sex&apos;)&#123;</span><br><span class="line">            throw new ReferenceError(&apos;该属性只能读，不能重写&apos;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            obj[key] = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var es3P1 = new ProxyEs3();</span><br><span class="line">es3P1.set(&quot;sex&quot;,&apos;女&apos;);</span><br><span class="line">console.log(es3P1.get(&apos;sex&apos;));</span><br></pre></td></tr></table></figure><ul><li style="list-style: none"><input type="checkbox" checked> 在试试ES5的写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//es5拦截方法</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name:&apos;小明&apos;</span><br><span class="line">&#125;;</span><br><span class="line">Object.defineProperty(obj,&quot;sex&quot;,&#123;</span><br><span class="line">    value:&apos;女&apos;,</span><br><span class="line">    writable:false</span><br><span class="line">&#125;);</span><br><span class="line">obj.sex = &apos;李四&apos;; //未报错</span><br><span class="line">console.log(obj.sex); //女</span><br></pre></td></tr></table></figure><p>ES5方法通过定义对象的属性来解决属性只读的效果，但是对不能读写的属性赋值时，控制台不报错.对遍历，对其他操作对象的方法未布置属性</p><ul><li style="list-style: none"><input type="checkbox" checked> 来看看ES6终极写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//es6拦截方法</span><br><span class="line">const obj = &#123;</span><br><span class="line">    name:&apos;小明&apos;,</span><br><span class="line">    sex:&apos;女&apos;</span><br><span class="line">&#125;;</span><br><span class="line">const proxy = new Proxy(obj, &#123;</span><br><span class="line">    get(target, prop) &#123;</span><br><span class="line">        if(prop in target)&#123;</span><br><span class="line">            return target[prop]</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            throw new TypeError(&apos;没有这个属性&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    set(target,prop,value)&#123;</span><br><span class="line">        if (prop === &apos;sex&apos;) &#123;</span><br><span class="line">            throw new TypeError(&apos;sex属性只能读&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">        obj[prop] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.sex = &apos;张三&apos;; //报错  TypeError: sex属性只能读</span><br></pre></td></tr></table></figure><p>Proxy 支持的拦截操作一览，一共 13 种,列举常用的 </p><h5 id="1-get-target-propKey-receiver-："><a href="#1-get-target-propKey-receiver-：" class="headerlink" title="1.get(target, propKey, receiver)："></a>1.get(target, propKey, receiver)：</h5><p>拦截对象属性的读取</p><h5 id="2-set-target-propKey-value-receiver"><a href="#2-set-target-propKey-value-receiver" class="headerlink" title="2.set(target, propKey, value, receiver):"></a>2.set(target, propKey, value, receiver):</h5><p>拦截对象属性的设置</p><h5 id="3-has-target-propKey-："><a href="#3-has-target-propKey-：" class="headerlink" title="3.has(target, propKey)："></a>3.has(target, propKey)：</h5><p>拦截propKey in proxy的操作，返回一个布尔值</p><h5 id="4-deleteProperty-target-propKey"><a href="#4-deleteProperty-target-propKey" class="headerlink" title="4.deleteProperty(target, propKey)"></a>4.deleteProperty(target, propKey)</h5><p>拦截delete proxy[propKey]的操作，返回一个布尔值。</p><h5 id="5-ownKeys-target-："><a href="#5-ownKeys-target-：" class="headerlink" title="5.ownKeys(target)："></a>5.ownKeys(target)：</h5><p>Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</p><h5 id="6-defineProperty-target-propKey-propDesc-："><a href="#6-defineProperty-target-propKey-propDesc-：" class="headerlink" title="6.defineProperty(target, propKey, propDesc)："></a>6.defineProperty(target, propKey, propDesc)：</h5><p>拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值</p><h5 id="7-getPrototypeOf-target"><a href="#7-getPrototypeOf-target" class="headerlink" title="7.getPrototypeOf(target)"></a>7.getPrototypeOf(target)</h5><p>拦截Object.getPrototypeOf(proxy)，返回一个对象。<br>。</p><h5 id="8-setPrototypeOf-target-proto-："><a href="#8-setPrototypeOf-target-proto-：" class="headerlink" title="8.setPrototypeOf(target, proto)："></a>8.setPrototypeOf(target, proto)：</h5><p>拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</p><h5 id="9-apply-target-object-args-："><a href="#9-apply-target-object-args-：" class="headerlink" title="9.apply(target, object, args)："></a>9.apply(target, object, args)：</h5><p>拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</p><h5 id="10-construct-target-args-："><a href="#10-construct-target-args-：" class="headerlink" title="10.construct(target, args)："></a>10.construct(target, args)：</h5><p>拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。</p><h3 id="实例：Web-服务的客户端"><a href="#实例：Web-服务的客户端" class="headerlink" title="实例：Web 服务的客户端"></a>实例：Web 服务的客户端</h3><p>Proxy 对象可以拦截目标对象的任意属性，这使得它很合适用来写 Web 服务的客户端。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const service = createWebService(&apos;http://example.com/data&apos;);</span><br><span class="line"></span><br><span class="line">service.employees().then(json =&gt; &#123;</span><br><span class="line">  const employees = JSON.parse(json);</span><br><span class="line">  // ···</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码新建了一个 Web 服务的接口，这个接口返回各种数据。Proxy 可以拦截这个对象的任意属性，所以不用为每一种数据写一个适配方法，只要写一个 Proxy 拦截就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function createWebService(baseUrl) &#123;</span><br><span class="line">  return new Proxy(&#123;&#125;, &#123;</span><br><span class="line">    get(target, propKey, receiver) &#123;</span><br><span class="line">      return () =&gt; httpGet(baseUrl+&apos;/&apos; + propKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.wailian.work/images/2018/06/04/timg.th.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>解析作用域链及闭包</title>
    <link href="https://jacktangrj.github.io/2018/06/scope/"/>
    <id>https://jacktangrj.github.io/2018/06/scope/</id>
    <published>2018-06-01T01:29:25.000Z</published>
    <updated>2018-06-04T09:23:51.206Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.wailian.work/images/2018/06/01/7777777.md.png" alt="image"></p><blockquote><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4></blockquote><p>作为一名程序员，作用域和闭包在JavaScript里非常重要，作用域与闭包一直是js中的难点，且面试必考。本文我们来聊一聊JavaScript作用域和闭包到底是什么 。<br><a id="more"></a></p><h3 id="一、作用域与作用域链"><a href="#一、作用域与作用域链" class="headerlink" title="一、作用域与作用域链"></a>一、作用域与作用域链</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>作用域与执行上下文的区别</p><blockquote><p>javascript的整个执行过程，分为两个阶段，代码编译阶段与代码执行阶段。编译阶段由编译器完成，讲代码翻译成可执行代码，这个阶段作用域规则会被确定。 执行阶段由引擎完成，执行可执行代码部分，执行上下文在这个阶段被创建</p></blockquote><p>我们知道函数在调用激活时，会开始创建对应的执行上下文，在执行上下文生成的过程中，变量对象，作用域链，以及this的值会分别被确定。</p><p><strong>作用域链，是由当前环境与上层环境的一系列变量对象组成，他保证了当前执行环境对符合访问权限的变量和函数的有序访问</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var a = 20;</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">    var b = a + 10;</span><br><span class="line"></span><br><span class="line">    function innerTest() &#123;</span><br><span class="line">        var c = 10;</span><br><span class="line">        return b + c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return innerTest();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p>在上面的例子中，全局，函数test，函数innerTest的执行上下文先后创建。我们设定他们的变量对象分别为VO(global)，VO(test), VO(innerTest)。而innerTest的作用域链，则同时包含了这三个变量对象，所以innerTest的执行上下文可如下表示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">innerTestEC = &#123;</span><br><span class="line">    VO: &#123;...&#125;,  // 变量对象</span><br><span class="line">    scopeChain: [VO(innerTest), VO(test), VO(global)], // 作用域链</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，因为变量对象在执行上下文进入执行阶段时，就变成了活动对象，使用AO来表示(Active Object)</p></blockquote><p>作用域链是由一系列变量对象组成，我们可以在这个单向通道中，查询变量对象中的标识符，这样就可以访问到上一层作用域中的变量了。</p><h3 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h3><p>对于那些有一点 JavaScript 使用经验但从未真正理解闭包概念的人来说，理解闭包可以看作是某种意义上的重生，突破闭包的瓶颈可以使你功力大增。</p><h5 id="闭包是一种特殊的对象它由两部分组成。执行上下文-代号A-，以及在该执行上下文中创建的函数（代号B）。"><a href="#闭包是一种特殊的对象它由两部分组成。执行上下文-代号A-，以及在该执行上下文中创建的函数（代号B）。" class="headerlink" title="闭包是一种特殊的对象它由两部分组成。执行上下文(代号A)，以及在该执行上下文中创建的函数（代号B）。"></a>闭包是一种特殊的对象它由两部分组成。执行上下文(代号A)，以及在该执行上下文中创建的函数（代号B）。</h5><h5 id="当B执行时，如果访问了A中变量对象中的值，那么闭包就会产生。"><a href="#当B执行时，如果访问了A中变量对象中的值，那么闭包就会产生。" class="headerlink" title="当B执行时，如果访问了A中变量对象中的值，那么闭包就会产生。"></a>当B执行时，如果访问了A中变量对象中的值，那么闭包就会产生。</h5><p> 在大多数理解中，包括许多著名的书籍，文章里都以函数B的名字代指这里生成的闭包。而在chrome中，则以执行上下文A的函数名代指闭包</p><p>因此我们只需要知道，一个闭包对象，由A、B共同组成，在以后的篇幅中，我将以chrome的标准来称呼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// demo01</span><br><span class="line">function foo() &#123;</span><br><span class="line">    var a = 20;</span><br><span class="line">    var b = 30;</span><br><span class="line"></span><br><span class="line">    function bar() &#123;</span><br><span class="line">        return a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var bar = foo();</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>上面的例子，首先有执行上下文foo，在foo中定义了函数bar，而通过对外返回bar的方式让bar得以执行。当bar执行时，访问了foo内部的变量a，b。因此这个时候闭包产生。</p><p>而我们知道，函数的执行上下文，在执行完毕之后，生命周期结束，那么该函数的执行上下文就会失去引用。其占用的内存空间很快就会被垃圾回收器释放。可是闭包的存在，会阻止这一过程。</p><p>先来一个简单的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var fn = null;</span><br><span class="line">function foo() &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    function innnerFoo() &#123;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fn = innnerFoo; // 将 innnerFoo的引用，赋值给全局变量中的fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar() &#123;</span><br><span class="line">    fn(); // 此处的保留的innerFoo的引用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line">bar(); // 2</span><br></pre></td></tr></table></figure><p>在上面的例子中，foo()执行完毕之后，按照常理，其执行环境生命周期会结束，所占内存被垃圾收集器释放。但是通过fn = innerFoo，函数innerFoo的引用被保留了下来，复制给了全局变量fn。这个行为，导致了foo的变量对象，也被保留了下来。于是，函数fn在函数bar内部执行时，依然可以访问这个被保留下来的变量对象。所以此刻仍然能够访问到变量a的值。</p><p>这样，我们就可以称foo为闭包。</p><p>我们可以在chrome浏览器的开发者工具中查看这段代码运行时产生的函数调用栈与作用域链的生成情况</p><p><img src="http://www.wailian.work/images/2018/06/01/599584-75ba724cb9e19b51.md.png" alt="image"></p><p>在上面的图中，红色箭头所指的正是闭包。其中Call Stack为当前的函数调用栈，Scope为当前正在被执行的函数的作用域链，Local为当前的局部变量。</p><h5 id="所以，通过闭包，我们可以在其他的执行上下文中，访问到函数的内部变量"><a href="#所以，通过闭包，我们可以在其他的执行上下文中，访问到函数的内部变量" class="headerlink" title="所以，通过闭包，我们可以在其他的执行上下文中，访问到函数的内部变量"></a>所以，通过闭包，我们可以在其他的执行上下文中，访问到函数的内部变量</h5><p>个人认为，从应用层面，这是闭包最重要的特性</p><p>对上面的例子稍作修改，如果我们在函数bar中声明一个变量c，并在闭包fn中试图访问该变量，运行结果会是什么呢</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var fn = null;</span><br><span class="line">function foo() &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    function innnerFoo() &#123;</span><br><span class="line">        console.log(c); // 在这里，试图访问函数bar中的c变量，会抛出错误</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    fn = innnerFoo; // 将 innnerFoo的引用，赋值给全局变量中的fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function bar() &#123;</span><br><span class="line">    var c = 100;</span><br><span class="line">    fn(); // 此处的保留的innerFoo的引用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line">bar();</span><br></pre></td></tr></table></figure><p>为啥会抛出错误，留给你思考。</p><h3 id="闭包的应用场景"><a href="#闭包的应用场景" class="headerlink" title="闭包的应用场景"></a>闭包的应用场景</h3><p>除了面试，在实践中，闭包有两个非常重要的应用场景。分别是模块化与柯里化。</p><p><strong>模块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;</span><br><span class="line">    var a = 10;</span><br><span class="line">    var b = 20;</span><br><span class="line"></span><br><span class="line">    function add(num1, num2) &#123;</span><br><span class="line">        var num1 = !!num1 ? num1 : a;</span><br><span class="line">        var num2 = !!num2 ? num2 : b;</span><br><span class="line"></span><br><span class="line">        return num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window.add = add;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">add(10, 20);</span><br></pre></td></tr></table></figure><p>在上面的例子中，使用函数自执行的方式，创建了一个模块，add是模块对外暴露的一个公共方法。而变量a，b被作为私有变量。在面向对象的开发中，我们常常需要考虑是将变量作为私有变量，还是放在构造函数中的this中，因此理解闭包，以及原型链是一个非常重要的事情。</p><p>为了验证自己有没有搞懂作用域链与闭包，这里留下一个经典的思考题，常常也会在面试中被问到。</p><p>利用闭包，修改下面的代码，让循环输出的结果依次为1， 2， 3， 4， 5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (var i=1; i&lt;=5; i++) &#123;</span><br><span class="line">    setTimeout( function timer() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;, i*1000 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.wailian.work/images/2018/06/01/7777777.md.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;作为一名程序员，作用域和闭包在JavaScript里非常重要，作用域与闭包一直是js中的难点，且面试必考。本文我们来聊一聊JavaScript作用域和闭包到底是什么 。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搞定this</title>
    <link href="https://jacktangrj.github.io/2018/05/jsThis/"/>
    <id>https://jacktangrj.github.io/2018/05/jsThis/</id>
    <published>2018-05-30T00:53:12.000Z</published>
    <updated>2018-06-05T02:07:52.663Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/this.jpg" alt="image"></p><blockquote><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4></blockquote><p>为什么要学习this？如果你学过面向对象编程，那你肯定知道干什么用的，如果你没有学过，那么暂时可以不用看这篇文章，当然如果你有兴趣也可以看看，毕竟这是js中必须要掌握的东西。</p><a id="more"></a><p>首先我们需要得出一个非常重要一定要牢记于心的结论，this的指向<strong>是在函数被调用的时候确定的</strong>也就是执行上下文被创建时确定的。</p><p>因此，一个函数中的this指向，可以是非常灵活的。比如下面的例子中，同一个函数由于调用方式的不同，this指向了不一样的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn () &#123;</span><br><span class="line">    console.log(this.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(); // 10</span><br><span class="line">fn.call(obj); // 20</span><br></pre></td></tr></table></figure><p><strong>在函数执行过程中，this一旦被确定，就不可更改了。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var a = 10;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fn () &#123;</span><br><span class="line">    this = obj; // 这句话试图修改this，运行后会报错</span><br><span class="line">    console.log(this.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h4 id="一、全局对象中的this"><a href="#一、全局对象中的this" class="headerlink" title="一、全局对象中的this"></a>一、全局对象中的this</h4><p><strong>局环境中的this，指向它本身</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 通过this绑定到全局对象</span><br><span class="line">this.a2 = 20;</span><br><span class="line"></span><br><span class="line">// 通过声明绑定到变量对象，但在全局环境中，变量对象就是它自身</span><br><span class="line">var a1 = 10;</span><br><span class="line"></span><br><span class="line">// 仅仅只有赋值操作，标识符会隐式绑定到全局对象</span><br><span class="line">a3 = 30;</span><br><span class="line"></span><br><span class="line">// 输出结果会全部符合预期</span><br><span class="line">console.log(a1);</span><br><span class="line">console.log(a2);</span><br><span class="line">console.log(a3);</span><br></pre></td></tr></table></figure><h4 id="二、函数中的this"><a href="#二、函数中的this" class="headerlink" title="二、函数中的this"></a>二、函数中的this</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// demo01</span><br><span class="line">var a = 20;</span><br><span class="line">function fn() &#123;</span><br><span class="line">    console.log(this.a); //20</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// demo02</span><br><span class="line">var a = 20;</span><br><span class="line">function fn() &#123;</span><br><span class="line">    function foo() &#123;</span><br><span class="line">        console.log(this.a);//20</span><br><span class="line">    &#125;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// demo03</span><br><span class="line">var a = 20;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 10,</span><br><span class="line">    c: this.a + 20,</span><br><span class="line">    fn: function () &#123;</span><br><span class="line">        return this.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(obj.c); //40</span><br><span class="line">console.log(obj.fn()); //10</span><br></pre></td></tr></table></figure><blockquote><p>在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。<strong>如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向undefined。但是在非严格模式中</strong>，当this指向undefined时，它会被自动指向全局对象。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 为了能够准确判断，我们在函数内部使用严格模式，因为非严格模式会自动指向全局</span><br><span class="line">function fn() &#123;</span><br><span class="line">    &apos;use strict&apos;;</span><br><span class="line">    console.log(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();  // fn是调用者，独立调用 输出undefined</span><br><span class="line">window.fn();  // fn是调用者，被window所拥有 输出window</span><br></pre></td></tr></table></figure><p>那么我们修改一下demo03的代码，大家可以思考一下会发生什么变化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var a = 20;</span><br><span class="line">function foo () &#123;</span><br><span class="line">    var a = 1;</span><br><span class="line">    var obj = &#123;</span><br><span class="line">        a: 10,</span><br><span class="line">        c: this.a + 20,</span><br><span class="line">        fn: function () &#123;</span><br><span class="line">            return this.a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return obj.c;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.log(window.foo());  // 40</span><br><span class="line">console.log(foo());    // Uncaught TypeError: Cannot read property &apos;a&apos; of undefined</span><br></pre></td></tr></table></figure><p>==如果调用者函数，被某一个对象所拥有，那么该函数在调用时，内部的this指向该对象。如果函数独立调用，那么该函数内部的this，则指向undefined。==</p><p>再来看一些容易理解错误的例子，加深一下对调用者与是否独立运行的理解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var a = 20;</span><br><span class="line">var foo = &#123;</span><br><span class="line">    a: 10,</span><br><span class="line">    getA: function () &#123;</span><br><span class="line">        return this.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo.getA()); // 10</span><br><span class="line"></span><br><span class="line">var test = foo.getA;</span><br><span class="line">console.log(test());  // 20</span><br></pre></td></tr></table></figure><p>foo.getA()中，getA是调用者，他不是独立调用，被对象foo所拥有，因此它的this指向了foo。而test()作为调用者，尽管他与foo.getA的引用相同，但是它是独立调用的，因此this指向undefined，在非严格模式，自动转向全局window。</p><p>稍微修改一下代码，大家自行理解。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = 20;</span><br><span class="line">function getA() &#123;</span><br><span class="line">    return this.a;</span><br><span class="line">&#125;</span><br><span class="line">var foo = &#123;</span><br><span class="line">    a: 10,</span><br><span class="line">    getA: getA</span><br><span class="line">&#125;</span><br><span class="line">console.log(foo.getA());  // 10</span><br></pre></td></tr></table></figure><p>灵机一动，再来一个。如下例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    console.log(this.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function active(fn) &#123;</span><br><span class="line">    fn(); // 真实调用者，为独立调用</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var a = 20;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 10,</span><br><span class="line">    getA: foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">active(obj.getA);  //20 严格模式输出undefined</span><br></pre></td></tr></table></figure><h4 id="三、使用call，apply显示指定this"><a href="#三、使用call，apply显示指定this" class="headerlink" title="三、使用call，apply显示指定this"></a>三、使用call，apply显示指定this</h4><p>JavaScript内部提供了一种机制，让我们可以自行手动设置this的指向。它们就是call与apply。所有的函数都具有着两个方法。它们除了参数略有不同，其功能完全一样。它们的第一个参数都为this将要指向的对象。</p><p>如下例子所示。fn并非属于对象obj的方法，但是通过call，我们将fn内部的this绑定为obj，因此就可以使用this.a访问obj的a属性了。这就是call/apply的用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function fn() &#123;</span><br><span class="line">    console.log(this.a);</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(obj);</span><br></pre></td></tr></table></figure><p>而call与applay后面的参数，都是向将要执行的函数传递参数。其中call以一个一个的形式传递，apply以数组的形式传递。这是他们唯一的不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function fn(num1, num2) &#123;</span><br><span class="line">    console.log(this.a + num1 + num2);</span><br><span class="line">&#125;</span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 20</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.call(obj, 100, 10); // 130</span><br><span class="line">fn.apply(obj, [20, 10]); // 50</span><br></pre></td></tr></table></figure><p>因为call/apply的存在，这让JavaScript变得十分灵活。因此就让call/apply拥有了很多有用处的场景。简单总结几点，也欢迎大家补充。</p><ul><li>将类数组对象转换为数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function exam(a, b, c, d, e) &#123;</span><br><span class="line"></span><br><span class="line">    // 先看看函数的自带属性 arguments 什么是样子的</span><br><span class="line">    console.log(arguments);</span><br><span class="line"></span><br><span class="line">    // 使用call/apply将arguments转换为数组, 返回结果为数组，arguments自身不会改变</span><br><span class="line">    var arg = [].slice.call(arguments);</span><br><span class="line"></span><br><span class="line">    console.log(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exam(2, 8, 9, 10, 3);</span><br><span class="line"></span><br><span class="line">// result:</span><br><span class="line">// &#123; &apos;0&apos;: 2, &apos;1&apos;: 8, &apos;2&apos;: 9, &apos;3&apos;: 10, &apos;4&apos;: 3 &#125;</span><br><span class="line">// [ 2, 8, 9, 10, 3 ]</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// 也常常使用该方法将DOM中的nodelist转换为数组</span><br><span class="line">// [].slice.call( document.getElementsByTagName(&apos;li&apos;) );</span><br></pre></td></tr></table></figure><ul><li>根据自己的需要灵活修改this指向</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var foo = &#123;</span><br><span class="line">    name: &apos;joker&apos;,</span><br><span class="line">    showName: function() &#123;</span><br><span class="line">      console.log(this.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var bar = &#123;</span><br><span class="line">    name: &apos;rose&apos;</span><br><span class="line">&#125;</span><br><span class="line">foo.showName.call(bar);</span><br></pre></td></tr></table></figure><ul><li>实现继承</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 定义父级的构造函数</span><br><span class="line">var Person = function(name, age) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age  = age;</span><br><span class="line">    this.gender = [&apos;man&apos;, &apos;woman&apos;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义子类的构造函数</span><br><span class="line">var Student = function(name, age, high) &#123;</span><br><span class="line"></span><br><span class="line">    // use call</span><br><span class="line">    Person.call(this, name, age);</span><br><span class="line">    this.high = high;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.message = function() &#123;</span><br><span class="line">    console.log(&apos;name:&apos;+this.name+&apos;, age:&apos;+this.age+&apos;, high:&apos;+this.high+&apos;, gender:&apos;+this.gender[0]+&apos;;&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Student(&apos;xiaom&apos;, 12, &apos;150cm&apos;).message();</span><br><span class="line"></span><br><span class="line">// result</span><br><span class="line">// ----------</span><br><span class="line">// name:xiaom, age:12, high:150cm, gender:man;</span><br></pre></td></tr></table></figure><p>简单给有面向对象基础的朋友解释一下。在Student的构造函数中，借助call方法，将父级的构造函数执行了一次，相当于将Person中的代码，在Sudent中复制了一份，其中的this指向为从Student中new出来的实例对象。call方法保证了this的指向正确，因此就相当于实现了继承。Student的构造函数等同于下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var Student = function(name, age, high) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age  = age;</span><br><span class="line">    this.gender = [&apos;man&apos;, &apos;woman&apos;];</span><br><span class="line">    // Person.call(this, name, age); 这一句话，相当于上面三句话，因此实现了继承</span><br><span class="line">    this.high = high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在向其他执行上下文的传递中，确保this的指向保持不变</li></ul><p>如下面的例子中，我们期待的是getA被obj调用时，this指向obj，但是由于匿名函数的存在导致了this指向的丢失，在这个匿名函数中this指向了全局，因此我们需要想一些办法找回正确的this指向。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 20,</span><br><span class="line">    getA: function() &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(this.a)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><p>常规的解决办法很简单，就是使用一个变量，将this的引用保存起来。我们常常会用到这方法，但是我们也要借助上面讲到过的知识，来判断this是否在传递中被修改了，如果没有被修改，就没有必要这样使用了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 20,</span><br><span class="line">    getA: function() &#123;</span><br><span class="line">        var self = this;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(self.a)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外就是借助闭包与apply方法，封装一个bind方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function bind(fn, obj) &#123;</span><br><span class="line">    return function() &#123;</span><br><span class="line">        return fn.apply(obj, arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    a: 20,</span><br><span class="line">    getA: function() &#123;</span><br><span class="line">        setTimeout(bind(function() &#123;</span><br><span class="line">            console.log(this.a)</span><br><span class="line">        &#125;, this), 1000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><p>当然，也可以使用ES5中已经自带的bind方法。它与我上面封装的bind方法是一样的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 20,</span><br><span class="line">    getA: function() &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(this.a)</span><br><span class="line">        &#125;.bind(this), 1000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、构造函数与原型方法上的this"><a href="#四、构造函数与原型方法上的this" class="headerlink" title="四、构造函数与原型方法上的this"></a>四、构造函数与原型方法上的this</h4><p>结合下面的例子，我在例子抛出几个问题大家思考一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function Person(name, age) &#123;</span><br><span class="line"></span><br><span class="line">    // 这里的this指向了谁?</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = function() &#123;</span><br><span class="line"></span><br><span class="line">    // 这里的this又指向了谁？</span><br><span class="line">    return this.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 上面的2个this，是同一个吗，他们是否指向了原型对象？</span><br><span class="line"></span><br><span class="line">var p1 = new Person(&apos;Nick&apos;, 20);</span><br><span class="line">p1.getName();</span><br></pre></td></tr></table></figure><p>通过new操作符调用构造函数，会经历以下4个阶段。</p><ul><li>创建一个新的对象；</li><li>将构造函数的this指向这个新对象；</li><li>指向构造函数的代码，为这个对象添加属性，方法等</li><li>返回新对象。</li></ul><p>因此，当new操作符调用构造函数时，this其实指向的是这个新创建的对象，最后又将新的对象返回出来，被实例对象p1接收。因此，我们可以说，这个时候，构造函数的this，指向了新的实例对象，p1。</p><p>而原型方法上的this就好理解多了，根据上边对函数中this的定义，p1.getName()中的getName为调用者，他被p1所拥有，因此getName中的this，也是指向了p1。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/this.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;为什么要学习this？如果你学过面向对象编程，那你肯定知道干什么用的，如果你没有学过，那么暂时可以不用看这篇文章，当然如果你有兴趣也可以看看，毕竟这是js中必须要掌握的东西。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>github新建博客并绑定阿里云域名</title>
    <link href="https://jacktangrj.github.io/2018/05/createBlog/"/>
    <id>https://jacktangrj.github.io/2018/05/createBlog/</id>
    <published>2018-05-28T00:53:12.000Z</published>
    <updated>2018-06-05T01:50:09.719Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/day-1.png" alt="image"></p><blockquote><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4></blockquote><p>其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站。</p><p>具体步骤如下：安装NodeJs-&gt;安装hexo-&gt;生成SSH并添加到github-&gt;部署项目-&gt;上传到github-&gt;绑定个人域名</p><a id="more"></a><h3 id="1-到Node-js官方网址下载对应版本"><a href="#1-到Node-js官方网址下载对应版本" class="headerlink" title="1.到Node.js官方网址下载对应版本"></a>1.到<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js官方网址</a>下载对应版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 node -v 出现版本号即为成功</span><br></pre></td></tr></table></figure><h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h3><ol><li>到官方网址下载对应的版本<br> Git各平台下载地址：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a><br> Windows平台Git下载地址：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a> </li><li>检查Git版本</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 git --version</span><br></pre></td></tr></table></figure><h3 id="3-GitHubPages配置"><a href="#3-GitHubPages配置" class="headerlink" title="3.GitHubPages配置"></a>3.GitHubPages配置</h3><ol><li>进入GitHub官网<a href="https://github.com/注册账号" target="_blank" rel="noopener">https://github.com/注册账号</a></li><li>新建项目</li><li>在建好的项目右侧有Settings </li><li>向下拉可看到GitHub Pages </li></ol><p><img src="http://www.wailian.work/images/2018/05/28/555.md.png" alt="image"></p><p>点击对应的网址你会发现该项目已经被部署到网络上，你可以通过外网来访问它。</p><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h3><p>在自己认为合适的地方创建一个文件夹，用来存放之后博客的文档以及配置文件，我是在C盘新建了文件夹，并命名为Blogs。<br>然后点击进入创建的文件夹，点击鼠标右键选择Git Bash Here</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 npm install hexo -g 开始安装Hexo</span><br></pre></td></tr></table></figure><p>输入 <code>npm install hexo -g </code>开始安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo -v 检查是否安装成功</span><br></pre></td></tr></table></figure><p><img src="http://www.wailian.work/images/2018/05/28/_20180528171548.md.png" alt="image"></p><p>初始化该文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo init</span><br></pre></td></tr></table></figure><p>这个过程也有点漫长需要等待几分钟，最后出现Start blogging with Hexo！是不是很激动！！</p><p>开始安装所需要的组件(也可通过淘宝源 cnpm install安装)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 npm install</span><br></pre></td></tr></table></figure></p><p>最后两步你就可以看到博客雏形了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo g</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo s</span><br></pre></td></tr></table></figure><p><img src="http://www.wailian.work/images/2018/05/28/666.md.png" alt="image"></p><p><strong>骚年，打开你的浏览器 输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 开启博客之旅</strong></p><p><img src="http://www.wailian.work/images/2018/05/28/1108615-20171022001738037-1195721153.md.png" alt="image"></p><h3 id="5-Hexo连接GithubPages"><a href="#5-Hexo连接GithubPages" class="headerlink" title="5.Hexo连接GithubPages"></a>5.Hexo连接GithubPages</h3><p>将Hexo与GithubPages联系起来，首次运行的话这里需要设置Git的user name和email<br>ctrl+C结束之前的sever</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入 git config --global user.name &quot;tangrenjie&quot; </span><br><span class="line"></span><br><span class="line">改成你自己的即可</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入 git config --g global user.email &quot;406067361@qq.com&quot; </span><br><span class="line"></span><br><span class="line">改成你自己的即可</span><br></pre></td></tr></table></figure><h5 id="1-首先需要检查你电脑是否已经有-SSH-key"><a href="#1-首先需要检查你电脑是否已经有-SSH-key" class="headerlink" title="1.首先需要检查你电脑是否已经有 SSH key"></a>1.首先需要检查你电脑是否已经有 SSH key</h5><p>运行 git Bash 客户端，输入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure><p><img src="http://www.wailian.work/images/2018/05/28/999.md.png" alt="image"></p><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。</p><h5 id="2、创建一个-SSH-key"><a href="#2、创建一个-SSH-key" class="headerlink" title="2、创建一个 SSH key"></a>2、创建一个 SSH key</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C  &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>添加密钥到ssh-agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure><p>添加生成的SSH key到ssh-agent</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>代码参数含义：</p><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><h5 id="3、添加你的-SSH-key-到-github上面去"><a href="#3、添加你的-SSH-key-到-github上面去" class="headerlink" title="3、添加你的 SSH key 到 github上面去"></a>3、添加你的 SSH key 到 github上面去</h5><p>a、首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>b、登录你的github账号，从又上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。</p><p><img src="http://www.wailian.work/images/2018/05/28/444.md.png" alt="image"></p><p><img src="http://www.wailian.work/images/2018/05/28/5555.md.png" alt="image"></p><h3 id="6-配置Deploy"><a href="#6-配置Deploy" class="headerlink" title="6.配置Deploy"></a>6.配置Deploy</h3><p>在你的博客所在文件夹根目录，例如我的是在C:\Blogs</p><p>找到_config.yml文件，点击编辑，我是用的nodepad++打开的 </p><p><img src="http://www.wailian.work/images/2018/05/28/ppp.md.png" alt="image"></p><p>==这里需要注意的是格式一定是：后跟一个空格，名称对应自己的GitHub项目名称==</p><p>到这里基本上博客已经搭建成功</p><h3 id="7-发布文章"><a href="#7-发布文章" class="headerlink" title="7.发布文章"></a>7.发布文章</h3><p>安装扩展 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo new &quot;Hexo教程&quot;</span><br></pre></td></tr></table></figure><p>此时在我的 C:\Blogs\source_posts 下会出现 Hexo教程.md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo g 编译，每次改动上传都要执行此操作</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo d 上传，等待一段时间就可以到github上去看已经提交了</span><br></pre></td></tr></table></figure><h3 id="8-安装主题"><a href="#8-安装主题" class="headerlink" title="8.安装主题"></a>8.安装主题</h3><pre><code>Concise，一款为hexo设计的简约而漂亮的主题</code></pre><h6 id="克隆主题"><a href="#克隆主题" class="headerlink" title="克隆主题"></a>克隆主题</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/huangjunhui/concise.git themes/concise</span><br></pre></td></tr></table></figure><h6 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h6><pre><code>修改你的博客根目录下的config.yml配置文件中的theme属性，将其修改为concise</code></pre><h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><pre><code>$ cd themes/concise $ git pull</code></pre><p>更新前，请先备份你的themes/concise/_config.yml文件。</p><p>更多请浏览 <a href="https://github.com/huangjunhui/concise/blob/master/README_ZH.md" target="_blank" rel="noopener">concise官网</a></p><h3 id="9-绑定阿里云域名"><a href="#9-绑定阿里云域名" class="headerlink" title="9.绑定阿里云域名"></a>9.绑定阿里云域名</h3><p>1.ping 一下你的github地址</p><p>我的github为  <a href="https://jacktangrj.github.io">https://jacktangrj.github.io</a></p><p><img src="http://www.wailian.work/images/2018/05/29/ip.png" alt="image"></p><p>2.打开阿里云<br><img src="http://www.wailian.work/images/2018/05/29/j1.png" alt="image"></p><p>3.更改hexo</p><p>打开本地文件地址，在source文件夹下添加CHANGE文件（==注意 没有后缀名==），里面的内容为你的域名</p><p><img src="http://www.wailian.work/images/2018/05/29/3333.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入 hexo g</span><br><span class="line">    hexo d </span><br><span class="line">    提交至github</span><br></pre></td></tr></table></figure><p>4.在github上修改</p><p><img src="http://www.wailian.work/images/2018/05/29/888.png" alt="image"></p><p>5.稍等一会，即可看到效果</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/day-1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;/blockquote&gt;
&lt;p&gt;其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站。&lt;/p&gt;
&lt;p&gt;具体步骤如下：安装NodeJs-&amp;gt;安装hexo-&amp;gt;生成SSH并添加到github-&amp;gt;部署项目-&amp;gt;上传到github-&amp;gt;绑定个人域名&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
